Agenda of Episode 
......................
In this episode we'll make out our react project without* using "npx create-react-app my-app" but we'll use NPM to install all the
required packages.

1. NPM :
It is everything but not "Node Package Manager" XD . It doesn't have a full form. It manages the packages. It works like a package manager 
but is not called "Node Package Manager".

2. In this episode we'll make out our react project without using "npx create-react-app my-app" but we'll use NPM to install all the
required packages.

3. Steps to do above :
    (a) npm init -> It'll ask few questions like name of the package, version, description, entry point, test command (Write jest here, we'll
    explore 'jest' later when we'll discuss writing test cases).
 
        => Doing this will create a package.json file. This file is the "configuration for NPM". 
        => Why do we need this package.json file? NPM is a package manager. It'll install the packages for us. Sometimes, these packages
           are also called as "dependencies". NPM manages these dependencies like taking care of whats the version of this package. So, 
           NPM would take care of the packages using this package.json file.
        => At the end, NPM is a command-line tool which comes bundled with Node.js, and it is installed as part of the Node.js installation process

    (b) We'll install bundler.

        => Bundler -> It bundles our app so it can be shipped to production. When we have HTML, CSS and javascript file as our code. 
                      Before sending for production, it needs to be minified, compressed and cleaned. So a Bundler does all these things. 
                      Example of a bundler : webpack bundler, parcel bundler

        => npx create-react-app my-app uses webpack and bable behind the scenes to bundle things up for production.

        => We'll use parcel here. Install using npm : npm install -D parcel. 

           "-D" purpose : It means it's a "development dependecy"
           -> There are 2 types of dependencies we can install. First, "development/dev dependecy" and Another are "normal dependecy"(Also called 
              production dependecy).
           -> Dev Dependencies are required in development phase normal dependencies are used in production phases.
           -> When you use the -D flag (or --save-dev) to install a package, it designates the package as a development dependency. 
              Development dependencies are not installed in the production environment, which helps save memory and reduces the size of the 
              deployed application.

        => When we hit above command, npm will install this required package from the npm repository over internet and our package.json file
           get updated and dev dependecy will be added like : 
           "devDependencies": {
              "parcel": "^2.9.3"
            }

        => "^" in ^2.9.3 is the carot symbol. It install latest minor version of the library. The caret symbol ^ indicates that the specified version
           is compatible with the specified major version but allows updates to minor and patch versions. In other words, it allows installing versions that are 
           backward-compatible with version 2.9.3. 2.9.3 is the specific version of the package that the constraint is referring to. 
           In this case, it's version 2.9.3.The version constraint ^2.9.3 allows npm to install any version greater than or equal to 
           2.9.3 but less than the next major version. For example, it would allow installing 2.9.3, 2.9.4, 2.9.5, and so on, but not 
           3.0.0 (assuming the next major version is 3). This version constraint is useful because it strikes a balance between getting
           the latest bug fixes and improvements (minor and patch updates) while ensuring that the package doesn't introduce breaking changes
           (major updates) that could potentially cause compatibility issues with your code.

        => If "~"(Tilde) is used instead, it'll install the latest major version of the library which is not very safe. Sometimes, when we have a major
           updated, your code can break.
        
        => Package-lock.json : The package-lock.json file is automatically generated by npm and is used to lock down the specific versions 
           of all the dependencies in your project, including the ones defined in the package.json file. It ensures that all developers working 
           on the project or the build environment use the same versions of the packages, avoiding any inconsistencies that might arise due to different
           dependency versions.
   
        => First time npm install, it also created a folder "node_modules" which has all the code of parcel libary. It also install other
           libraries which are the dependencies of parcel libray. Those libraries can again have dependecies which till be installed.
           This is known as "Transitive dependecies".
    
     (c) npx parcel index.html
         This will have a output : 
         Server running at http://localhost:1234

        => Parcel has created a server for us and out app is available at port 1234
        => Just like we have "npm" we also have "npx". npm means we are calling a command of npm where npx means executing a package.
           So "npm" is used to install a package and "npx" is used to execute a package.
        => Parcel is beast. What it does : It goes to the source (index.html) here and it creates a development build of it and host it
           to local server 1234 port. 

      (d) Install React using npm : 
          npm install react 
          npm i react-dom
          (Note : we are not installing this as a dev dependency)

        =>  One way to put ReactJS is using CDN links and adding them in script tags of html file. We have already seen this. But this
          is not a good way to do it since fetching from CDN is costly operation then installing and taking from local. 
          At the end, React and ReactDOM are javascript libraries which we can easily install using nodejs. Also, if installed in node-node_modules,
          it'll come in package.json and thus it'll be easy to manage it's dependencies. 

        => Now we'll remove CDN links from index.html and run the app again using "npx parcel index.html". Console gives the error "React is not defined"
           Error is coming because we have just installed the package but not imported it. so we import it using :

           import React from "react";
           import ReactDOM from "react-dom";

        => Again error comes saying "Browser scripts cannot have imports or exports". This error comes since we we are importing App.js in our  
           index.html file and broswer treats this script as a browser script which cannot have import statement that we put just above. 
           To resolve this error we tell browser, this is not a browser script but this command : 
            <script type="module" src="./App.js"></script> (Changes made in index.html )
        
        => Remove another warning but importing ReactDOM from "react-dom/client" instead of "react-dom". It's changed recently.

        => if you make a change to code, it automatically updates changes on browser. Parcel is very powerful and does this for you. 
           Normal job of Parcel : 
           - Dev build
           - Local Server
           - MMR = Hot Module Replacement :   When we update the app and save it, it does "HMR" - Hot Module Replacement. Parcel uses a file 
             watching algorithm written in C++ which keeps an eye on all those file. If you update a file and save it, it builds the dev build
             again and host on local server.It uses caching to do quick builds. ( stored in .parcel-cache)
           - Caching - Faster builds
           - Image Optimization
           - Minification of files ( if production build it created, minification of files is done)
           - Bundlding of files
           - compress the files
           - consistent hashing
           - code splitting
           - differential Bundling
           - Diagnostic of errors in your app
           - Error handling
           - Tree Shaking - Removes unused code for you.

           *** Doing above makes your react app faster. (It's an important interview question)
           Thus it's not just React library, which makes out apps faster but also a lot of other libraries and Parcel is one of them.
          *****
         
        (e) Creating a production build using parcel : 
            npx parcel build index.html 

            => Here, we'll get an error  : Target "main" declares an output file path of "App.js" which does not match the compiled bundle type "html".
            The error comes because when we write the command "npx parcel build index.html", we tell parcel the entry point of our app
            is "index.html" but in our package.json we have a line of code "main": "App.js", which tell app.js is the entry point. They both
            are conflicting. So remove "main": "App.js" from package.json.

            Note : /dist is created for both dev and production builds by parcel. but production builds are far far less minified and optimized for
            production.

            => After we remove it, a "dist" folder is created with build files. It bundles, minifies all the stuffs mentioned above and creates
               a new set of production ready bundle. 

            => Put /.parcel-cache and /dist in  your .gitignore. 
               Rule for gitignore : Whatever you can regenerate, you'll not push to git but add it to .gitignore

        (f) Make out app compatible for older version of browser

            => We'll use "browserslist" library for this. It's already installed in our node_modules. We need to tell our browserslist
               what all browsers we need the support of. So we need to put some configuration. 
            
            => We configure it inside package.json. Example add this in package.json : 
                "browserslist": [
                        "last 10 Chrome version",
                        "last 2 Firefox versions
                ]
                Doing this, my app will support last 10 versions of chrome and last 2 versions of Firefox. 
                
            => Giving this configs doesn't mean it'll not work for other browser versions/types but it'll definitely work for these
               browser versions mentioned.

4. Including all the steps above, we have created our own production ready React app from scratch :)


            



        

          
    


 
