1. Introduction to npm scripts : It's a industry standard practice that we follow to write commands in package.json under scripts which
   we use often. 

   => Example : Better way to start our app on dev mode : instead of writing npx parcel index.html everytime to create a dev build and 
      deploy or app on local system, we can create a script and add it to package.json file.
      Example adding this to package.json in scripts :
      "scripts": {
      "start": "parcel index.html",
      "build": "parcel build index.html",
      ..
      }
      Note: Here the keys 'start' and 'build' are name of the scripts and can be anything. 

    => To run these scripts : npm run <script_name>
        example : npm run start -> will run above script with command "parcel index.html" and parcel will create 
        a dev build and deploy to local system.

        Note : Only for "start" script name, we can "npm start" ommitting run but we cannot do this for other script names. Reason : 'start'
        is reserved by npm, so we can directly run it.

   => npm start : conventionally used to start app in development mode.

   => npm run build : conventionally used to build the app in production mode.

2. React Element : Just are we have DOM elements (HTML elements), we have React elements which are equivalent to DOM elements. 
   
   => Suppose we want to create a h1 element in DOM. 
   => We create a react element equivalent to h1, we create this h1 equivalent ReactElement by : 
      const heading = React.createElement("h1",{id:"heading"},"This is a h1 tag");
   => React Element is not an HTML element, it's an object and when we render this React element to DOM, it becomes HTML.
   
3. JSX  : It's javasript syntax which makes it easy to write React elements.
   => JSX is not a part of React. Large React apps can still be built without using JSX. But we use JSX since it makes developer's 
      life easy.

   => JSX is a convention where we merge HTML and Javscript together.

   => Creating a h1 element and rendering in div with id "root" using JSX : 

      const jsxHeading = <h1>Hi Ayush created using JSX</h1>;
      const root = ReactDOM.createRoot(document.getElementById("root"));
      root.render(jsxHeading);

   => "JSX is not HTML". It's HTML like synatx but not exactly HTML.
  
   => JSX is not a pure javasript and JS engine will not understand it.  "const jsxHeading = <h1>Hi Ayush created using JSX</h1>; " will 
      not be understood to JS engines. You can test this by copy pasting the code on browser console and js engine will not understand. 

   => Then how JSX works and is understood by JS engine ? 

      - Parcel transpiles the JSX code before it it excuted by JS Engine. 
      - Parcel does this using a another package called "Babel". Parcel is a manager of Babel. XD
      - Babel is a dependenc of Parcel and is automatically installed when we install Parcel.
      - Transpiling :  It takes the JSX and converts to code to React.createElement which is a javascript object of React.
      - Finally React.CreateElement is converted as HTML when rendered to DOM.
      - Babel does a lot of other work too. Example : transpiring current JS code to a old JS code which old browsers can understand.

   => Multi-line JSX :

      we need to wrap out entire JSX code in round brackets "()" so that babel can understand where your JSX is starting and where it is ending.


3. Component in React :

   => 2 types : 
               (1) Class Based Components - old way, nobody uses class based components now - used Javascript Classes
               (2) Functional Components  - new way, and 99.99% of developers write functional components - uses Functional components
   

   React Functional Component 
   ....................
   => It's a normal Javascript function. Simple :)
   => This function returns a piece of JSX code (OR) a function which returns a React Element.
   => Example :  
      const headComponent = () => {
         return <h1>Namaste React Functional Component</h1>;
         };
      
      Note - You can also write this by skipping return and flower brackets { } : 
      const headComponent = () => <h1>Namaste React Functional Component</h1>;

   => If your JSX is multiline, put it inside (). eg : 
      const headComponent = () =>( <h1>Namaste React Functional Component</h1>;
       <h2> this is 2nd line </h2>;
       );

      Rendering this React component in root  :
      const root = ReactDOM.createRoot(document.getElementById("root"));

      // Rendering a React Component
      root.render(<HeadComponent />);    // Enclosing the component name in < />. Babel understands using this < /> that this is a component
      and we need to render it.
   
   => All these components given under </ > are not understood by javascript engine, so these are also being transpiled by Babel to
      React Elements which are then rendered as HTML using root.Render() function.


   => Component Composition :  Simply forming a component by using another components in it. So, it refers to the practice of building 
      complex user interfaces by combining and nesting smaller,reusable components together.  
   

   => Putting Javascript code in JSX: 

      Putting Curly braces { } in a JSX, you can run any piece of javasript code.
      (a) Example 1 : let name = "Ayush Bhardwaj";
      const HeadComponent = () => (
      <div id="container">
         <Title />
         <div>Hi {name}</div>
         <h1>Namaste React Functional Component</h1>
      </div>
      );

      (b) Example 2 : let HelloClass = "c2";
      const HeadComponent = () => (
      <div id="container">
         <Title />
         <div class={HelloClass}>Hi {name}</div>
         <h1>Namaste React Functional Component</h1>
      </div>
      );

   => We say how to put one component inside another but How to put a reactElement in a functional component ?

      just put the functional component inside { }
      since reactElement is a javascript object which can be put to JSX using curly braces (Done in the App.js code)
      
   => How to put one React Element inside another React Element ?
      Same, using curly Braces {}

   => How JSX escapes cross-site scripting attacks : 

      Example code : Suppose you get some data from an API and that data in excuted and run in JSX in {}, it can be dangerous 
      if the data is malacious, any javascript code can be run on client's machine and their browser data can be breached.

      const data = api.getData();
      const Title = () => <h1>Heading</h1>;
      const HeadComponent = () => (
         <div id="container">
            {data}
         </div>
      );

      But JSX is soo good that it takes care of it. JSX doesn't execute any JS code blindly in {}. It does a filtering.  

   => Ways to render a component : 
      1. <component_name/>
      2. <component_name></component_name>
      3. {component_name()}





   


            

      
      
    
